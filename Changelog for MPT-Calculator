Changelog for MPT-Calculator:

June 2023:
- Refactored repeated code for PODSweep, PODSweepMulti, FullSweep, FullSweepMulti, PODSweepIterative to make maintaining the codebase easier and the different modes more reliable.
- Introduced pre-run checks for the required integration order. Can be toggled via Settings.py
- Introduced L2 projection of piecewise constant material properties. Gives same results, but more easily generalisable in the future.
- Swapped POD snapshot postprocessing over to the faster integral method. More accurate and faster.


March 2023:
- Added general intgration order (Integration_Order) to the main() function. This then propagates through the different MPT-Calculator functions. E.g. PODSweep.
- Updated missing bonus_intorder to full solve and integration mode linear and bilinear forms.
- Added to CheckValid.py to also compute the object volume.


Feb 2023:
- Refactored Functions folder, such that each function now has its own file. This was to make debugging easier.
- set 2(p+1) integration order to Integration functions.

- main.py:
	- Added saving of parent script, i.e. the one that called main to Results folder. This makes it easier to recreate results. Saves both .py and .ipynb files, although notebooks are saved by copying the most recent file in the ipynb checkpoints folder (this is because there is no requirement to save a notebook before running it.)

- Generate_From_Python.py:
	- Now allows users to specify alpha in the OCC file. Will update alpha from whatever was specified in main. This was to help with consistency with choosing boundary layer thicknesses.

- FolderMaker.py:
	- Now copies functions to the results folder in the same refactored folder format.

- Theta1_Sweep.py:
	Now supports multithreaded solving of linear system. This has lead to a significant speed improvement at no extra memory usage. Option to choose number of threads in Settings.py.

- PODSweep.py and PODSweepMulti.py:
	- Now supports faster postprocessing of the theta0 and theta1 solution vectors. New method relies on small vector-matrix-vector products and is substantially faster than repeat integration.

- PODSweepIterative.py:
	- New method for adaptively choosing new snapshot frequencies in POD. Method chooses new snapshot frequencies based on the maximum error certificates and updates the POD with the new solutions.
	- Options added in Settings.py.
	- Saving of results to results folder with prefix "Iterative_POD".


Nov 2022:
- main.py:
	- Refactored main.py to be a function with common arguments (order, alpha, geometry ect) being added as variable input arguments. The motivation behind this was to make flow control easier, e.g. looping through different orders.
	- Added occ geometry generation and saving. Currently set up that .py files must be in OCC_Geometry Folder.
	- Added return for TensorArray, EigenValues, N0, elements, Array, ndofs, EddyCurrentTest, invariants, and the POD equivalents. This is to make using these parameters easier for an end user who may wish to use them elsewhere.
	- Added documentation to function.

- MeshCreation.py:
	- Added function Generate_From_Python(OCC_file) for use when using the OCC geometry. Includes dependency on the standard library runpy.

- ResultsFunctions.py:
	- Added option to FolderMaker for saving .py file when using OCC.
	- Added saving for OCC python files.
	- Added saving for tensor invariants.

- SingleSolve.py:
	- Fixed bug in calculation of N0.

- PODSolvers.py:
	- Fixed bug in calculation of N0.
	- Added force manual close of parallel pool.
	- Changed pool initialisation from fork to spawn in PODSweepMulti. This was to attempt to fix a bug where the program would stall in multiprocessing on linux.
	- To enable changing pool initialisation, I've use multiprocessing.
	- added try-exeption clause to multiprocessing print statement for progress bar. This was to avoid a BrokenPipe error.

- FullSolvers.py:
    - Fixed bug in calculation of N0.
    - Changed pool initialisation from fork to spawn in FullSweepMulti. This was to attempt to fix a bug where the program would stall in multiprocessing on linux.
	- To enable changing pool initialisation, I've use multiprocessing.
	- added try-exeption clause to multiprocessing print statement for progress bar. This was to avoid a BrokenPipe error.

- main_2d.py:
    - Added functionality for 2D ROM and associated functions. Subject to change.

- OCC_Geometry:
    - Added OCC_Geometry folder and simple worked examples.

- Tutorials:
	- Added a series of Jupyter notebook tutorials covering the use of MPT-Calculator.
